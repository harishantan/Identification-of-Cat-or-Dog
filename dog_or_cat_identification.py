# -*- coding: utf-8 -*-
"""Dog or Cat Identification

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1niK6GOlgrxM-GacXb_N1oT3z8nEAVz65
"""

import os
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score
import cv2
from skimage import color, feature, transform

# Function to preprocess an image
def preprocess_image(image_path):
    image = cv2.imread(image_path)
    resized_image = cv2.resize(image, (64, 64))
    grayscale_image = color.rgb2gray(resized_image)
    hog_features = feature.hog(grayscale_image)
    return hog_features

# Function to predict the class of a new image
def predict_image(image_path, model, preprocess_function):
    hog_features = preprocess_function(image_path)
    features_for_prediction = hog_features.reshape(1, -1)
    predicted_class = model.predict(features_for_prediction)[0]
    return predicted_class

# Assuming the folder contains images of both cats and dogs
base_folder = '/content/drive/MyDrive/train1'  # Replace with your actual path

X = []
y = []

for image_name in os.listdir(base_folder):
    image_path = os.path.join(base_folder, image_name)
    hog_features = preprocess_image(image_path)

    # Extract class label from the filename
    label = 'cat' if 'cat' in image_name else 'dog'

    X.append(hog_features)
    y.append(label)

X = np.array(X)
y = np.array(y)

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train a Support Vector Machine (SVM) classifier
svm_model = SVC(kernel='linear')
svm_model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = svm_model.predict(X_test)

# Evaluate the accuracy of the model
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy}')

# Example usage of the predict_image function
image_path_to_predict = '/content/drive/MyDrive/test3/9574.jpg'  # Replace with the actual path to your image
predicted_class = predict_image(image_path_to_predict, svm_model, preprocess_image)

print(f'The predicted class is: {predicted_class}')